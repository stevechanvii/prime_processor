{"version":3,"sources":["assets/cpu.svg","component/Loader/Loader.jsx","component/Modal/Modal.js","component/AlgorithmCheck/AlgorithmCheck.js","component/PrimeGenerator/PrimeGenerator.jsx","algorithm/prime.js","App.js","index.js"],"names":["module","exports","Timer","className","UA","window","navigator","userAgent","toLowerCase","IS_IE_9","indexOf","Dialog","props","animation","animationType","enterAnimation","leaveAnimation","CloseButton","showCloseButton","onClick","onClose","role","onKeyPress","event","which","tabIndex","width","height","measure","duration","customStyles","style","animationDuration","WebkitAnimationDuration","mergedStyles","children","Modal","state","isShow","onKeyUp","closeOnEsc","keyCode","animationEnd","onAnimationEnd","setState","el","focus","target","this","visible","enter","prevProps","leave","closeMaskOnClick","customMaskStyles","showMask","Mask","display","cx","ref","React","Component","defaultProps","PrimeGenerator","useState","primeCount","setPrimeCount","algorithm","setAlgorithm","primes","setPrimes","loading","setLoading","info","setInfo","isVisible","setVisible","name","desc","modal","setModal","showModal","useEffect","start","Date","getTime","n","length","flag","i","j","push","primeBruteForce","array","upperLimit","Math","sqrt","primeEratosthenes","end","type","autoComplete","value","onChange","e","id","checked","htmlFor","console","log","algorithmCheck","parseInt","Number","isInteger","map","prime","index","key","animationDelay","detail","App","src","cpu","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d59040ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cpu.536222e7.svg\";","import React from 'react';\n\nimport './Loader.css';\n\nconst Timer = () => {\n    return (\n        <div>\n            <div className='loader'>Loading...</div>\n        </div>\n    );\n};\n\nexport default Timer;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport cx from \"classnames\"\n\nimport \"./Modal.css\"\n\n// env\nconst IN_BROWSER = typeof window !== \"undefined\"\nconst UA = IN_BROWSER && window.navigator.userAgent.toLowerCase()\nconst IS_IE_9 = UA && UA.indexOf(\"msie 9.0\") > 0\n\nconst Dialog = props => {\n  const animation =\n    (props.animationType === \"enter\"\n      ? props.enterAnimation\n      : props.leaveAnimation) || props.animation\n\n  const className = `rodal-dialog rodal-${animation}-${props.animationType}`\n\n  const CloseButton = props.showCloseButton ? (\n    <span\n      className=\"rodal-close\"\n      onClick={props.onClose}\n      role=\"presentation\"\n      onKeyPress={event => {\n        if (props.onClose && event.which === 13) {\n          props.onClose(event)\n        }\n      }}\n      tabIndex={0}\n    />\n  ) : null\n\n  const { width, height, measure, duration, customStyles } = props\n\n  const style = {\n    width: width + measure,\n    height: height + measure,\n    animationDuration: duration + \"ms\",\n    WebkitAnimationDuration: duration + \"ms\",\n  }\n\n  const mergedStyles = { ...style, ...customStyles }\n\n  return (\n    <div style={mergedStyles} className={className}>\n      {props.children}\n      {CloseButton}\n    </div>\n  )\n}\n\nclass Modal extends React.Component {\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    measure: PropTypes.string,\n    visible: PropTypes.bool,\n    showMask: PropTypes.bool,\n    closeOnEsc: PropTypes.bool,\n    closeMaskOnClick: PropTypes.bool,\n    showCloseButton: PropTypes.bool,\n    animation: PropTypes.string,\n    enterAnimation: PropTypes.string,\n    leaveAnimation: PropTypes.string,\n    duration: PropTypes.number,\n    className: PropTypes.string,\n    customStyles: PropTypes.object,\n    customMaskStyles: PropTypes.object,\n    onClose: PropTypes.func.isRequired,\n    onAnimationEnd: PropTypes.func,\n  }\n\n  static defaultProps = {\n    width: 400,\n    height: 240,\n    measure: \"px\",\n    visible: false,\n    showMask: true,\n    closeOnEsc: false,\n    closeMaskOnClick: true,\n    showCloseButton: true,\n    animation: \"zoom\",\n    enterAnimation: \"\",\n    leaveAnimation: \"\",\n    duration: 300,\n    className: \"\",\n    customStyles: {},\n    customMaskStyles: {},\n  }\n\n  state = {\n    isShow: false,\n    animationType: \"leave\",\n  }\n\n  componentDidMount() {\n    if (this.props.visible) {\n      this.enter()\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.visible && !prevProps.visible) {\n      this.enter()\n    }\n\n    if (!this.props.visible && prevProps.visible) {\n      this.leave()\n    }\n  }\n\n  enter() {\n    this.setState({ isShow: true, animationType: \"enter\" })\n  }\n\n  leave() {\n    this.setState(IS_IE_9 ? { isShow: false } : { animationType: \"leave\" })\n  }\n\n  onKeyUp = event => {\n    if (!this.props.closeOnEsc || event.keyCode !== 27) {\n      return\n    }\n\n    this.props.onClose(event)\n  }\n\n  animationEnd = event => {\n    const { animationType } = this.state\n    const { closeOnEsc, onAnimationEnd } = this.props\n\n    if (animationType === \"leave\") {\n      this.setState({ isShow: false })\n    } else if (closeOnEsc) {\n      this.el.focus()\n    }\n\n    if (event.target === this.el && onAnimationEnd) {\n      onAnimationEnd()\n    }\n  }\n\n  render() {\n    const {\n      closeMaskOnClick,\n      onClose,\n      customMaskStyles,\n      showMask,\n      duration,\n      className,\n      children,\n    } = this.props\n\n    const { isShow, animationType } = this.state\n\n    const Mask = showMask ? (\n      <div\n        className=\"rodal-mask\"\n        style={customMaskStyles}\n        onClick={closeMaskOnClick ? onClose : void 0}\n        role=\"presentation\"\n      />\n    ) : null\n\n    const style = {\n      display: isShow ? \"\" : \"none\",\n      animationDuration: duration + \"ms\",\n      WebkitAnimationDuration: duration + \"ms\",\n    }\n\n    return (\n      <div\n        style={style}\n        className={cx(\"rodal\", `rodal-fade-${animationType}`, className)}\n        onAnimationEnd={this.animationEnd}\n        tabIndex=\"-1\"\n        ref={el => {\n          this.el = el\n        }}\n        onKeyUp={this.onKeyUp}\n        role=\"presentation\"\n      >\n        {Mask}\n        <Dialog {...this.props} animationType={animationType}>\n          {children}\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nexport default Modal\n","export default {\n    'Brute Force': [\n        'Loop number one by one',\n        'Set another inner loop from 2 to current number N',\n        'For each inner loop, get the remainder and compare with 0',\n        'If the remainder is 0, set the flag to false and jump out the loop',\n        'If flag is true then N is prime',\n        'Time complexity: O(N²)',\n    ],\n    'Sieve of Eratosthenes': [\n        'Create a list of consecutive integers from 2 through n',\n        'Initially, let p equal 2, the smallest prime number',\n        'Enumerate the multiples of p by counting in increments of p from 2p to n, and mark them in the list',\n        'Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let p now equal this new number (which is the next prime), and repeat from previous step',\n        'When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n',\n        'Time complexity: O(nlog logn)',\n    ],\n};\n","import React, { useState, useEffect } from 'react';\n\nimport Loader from '../Loader/Loader';\nimport Modal from '../Modal/Modal';\nimport algorithmCheck from '../AlgorithmCheck/AlgorithmCheck';\nimport { primeBruteForce, primeEratosthenes } from '../../algorithm/prime';\n\nconst PrimeGenerator = () => {\n    /**\n     * primeCount: the number of primes to be calculated\n     * algorithm: a string of selected algorithm\n     * primes: a list of prime numbers\n     * loading: boolean state to check weather the algorithm is running\n     * info: a short description of running status\n     * isVisible: a modal display\n     */\n    const [primeCount, setPrimeCount] = useState(1000);\n    const [algorithm, setAlgorithm] = useState('Brute Force');\n    const [primes, setPrimes] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [info, setInfo] = useState('');\n    const [isVisible, setVisible] = useState(false);\n    const [modal, setModal] = useState({ name: 'Error', desc: ['Input must be an integer'] });\n\n    const showModal = () => setVisible(true);\n    const hideModal = () => setVisible(false);\n\n    /**\n     * Radio button change handler\n     */\n    const onAlgorithmCheckClick = () => {\n        console.log('Check');\n        setModal({ name: algorithm, desc: algorithmCheck[algorithm] });\n        showModal();\n    };\n\n    /**\n     * Button Generate Prime click handler, set loading to provoke effect hook\n     */\n    const clickHandler = () => {\n        const n = parseInt(primeCount);\n        console.log(algorithm);\n        if (n > 0 && Number.isInteger(n)) {\n            if (algorithm === 'Brute Force' && primeCount > 10000) {\n                setModal({\n                    name: 'Error',\n                    desc: [\n                        'Brute Force will spend you minutes to calculate, try a smaller number or use Eratosthenes algorithm',\n                    ],\n                });\n                showModal();\n            } else if (algorithm === 'Sieve of Eratosthenes' && primeCount > 500000) {\n                setModal({\n                    name: 'Error',\n                    desc: [\n                        'Eratosthenes algorithm support numbers up to 500,000, plesase try a smaller number',\n                    ],\n                });\n                showModal();\n            } else {\n                setLoading(true);\n            }\n        } else {\n            setModal({ name: 'Error', desc: ['Input must be a positive integer greater than 1'] });\n            showModal();\n        }\n    };\n\n    /**\n     * Calculate prime numbers after the page first render or loading state change\n     */\n    useEffect(() => {\n        const start = new Date().getTime();\n        if (algorithm === 'Brute Force') {\n            setPrimes(primeBruteForce(primeCount));\n        } else {\n            setPrimes(primeEratosthenes(primeCount));\n        }\n        const end = new Date().getTime();\n        const time = end - start;\n\n        setInfo(\n            `We spend ${time}ms to find the ${\n                algorithm === `Brute Force`\n                    ? `first ${primeCount} primes`\n                    : `primes between 0 to ${primeCount}`\n            } by ${algorithm} algorithm.`\n        );\n        setLoading(false);\n    }, [loading]);\n\n    return (\n        <div className='generator'>\n            <div className='generator__form'>\n                <div className='generator__form-subtitle'>\n                    {algorithm === 'Brute Force'\n                        ? 'Find the first '\n                        : 'Find prime numbers from 0 to '}\n                    <input\n                        type='number'\n                        name='prime'\n                        autoComplete='off'\n                        className='generator__form-input'\n                        value={primeCount}\n                        onChange={(e) => setPrimeCount(e.target.value)}\n                    ></input>\n                    {algorithm === 'Brute Force' ? ' prime numbers' : ''}\n                </div>\n\n                <div className='generator__form__group'>\n                    <div className='generator__form__radio-group'>\n                        <input\n                            type='radio'\n                            id='small'\n                            className='generator__form__radio-input'\n                            name='algorithm'\n                            value='Brute Force'\n                            checked={algorithm === 'Brute Force'}\n                            onChange={(e) => setAlgorithm(e.target.value)}\n                        />\n                        <label htmlFor='small' className='generator__form__radio-label'>\n                            <span className='generator__form__radio-button'></span>\n                            Brute Force\n                        </label>\n                    </div>\n\n                    <div className='generator__form__radio-group'>\n                        <input\n                            type='radio'\n                            id='large'\n                            className='generator__form__radio-input'\n                            name='algorithm'\n                            value='Sieve of Eratosthenes'\n                            checked={algorithm === 'Sieve of Eratosthenes'}\n                            onChange={(e) => setAlgorithm(e.target.value)}\n                        />\n                        <label htmlFor='large' className='generator__form__radio-label'>\n                            <span className='generator__form__radio-button'></span>\n                            Eratosthenes\n                        </label>\n                    </div>\n                </div>\n\n                <div className='generator__form-button-group'>\n                    <button className='generator__form-button' onClick={onAlgorithmCheckClick}>\n                        Check Algorithm\n                    </button>\n                    <button className='generator__form-button' onClick={clickHandler}>\n                        Generate Prime\n                    </button>\n                </div>\n            </div>\n            <div>\n                {loading ? (\n                    <Loader />\n                ) : (\n                    <div className='prime'>\n                        <div className='prime__info'>{info}</div>\n                        <div className='prime__list'>\n                            {primes.map((prime, index) => (\n                                <span\n                                    key={index}\n                                    className='prime__number-scale prime__number'\n                                    style={{ animationDelay: `${index * 50}ms` }}\n                                >\n                                    {prime}\n                                </span>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n            <Modal visible={isVisible} onClose={() => hideModal()} animation='zoom' width={560}>\n                <p className='modal__header'>{modal.name}</p>\n                <div className='modal__content'>\n                    <ul className='modal__content-ul'>\n                        {modal.desc.map((detail, index) => (\n                            <li key={index}>{detail}</li>\n                        ))}\n                    </ul>\n                </div>\n            </Modal>\n        </div>\n    );\n};\n\nexport default PrimeGenerator;\n","export const primeBruteForce = (primeCount) => {\n    const primes = [];\n    let n = primes.length;\n    let flag = true;\n\n    let i = 2;\n    while (n < primeCount) {\n        flag = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                flag = false;\n                break;\n            }\n        }\n\n        if (flag) {\n            primes.push(i);\n            n++;\n        }\n        i++;\n    }\n\n    return primes;\n};\n\nexport const primeEratosthenes = (primeCount) => {\n    // This demo can be found at http://jsfiddle.net/KARZw/\n    // Eratosthenes algorithm to find all primes under n\n    var array = [],\n        upperLimit = Math.sqrt(primeCount),\n        primes = [];\n\n    // Make an array from 2 to (n - 1)\n    for (var i = 0; i < primeCount; i++) {\n        array.push(true);\n    }\n\n    // Remove multiples of primes starting from 2, 3, 5,...\n    for (var i = 2; i <= upperLimit; i++) {\n        if (array[i]) {\n            for (var j = i * i; j < primeCount; j += i) {\n                array[j] = false;\n            }\n        }\n    }\n\n    // All array[i] set to true are primes\n    for (var i = 2; i < primeCount; i++) {\n        if (array[i]) {\n            primes.push(i);\n        }\n    }\n\n    return primes;\n};\n","import React from 'react';\nimport './styles/main.scss';\n\nimport PrimeGenerator from './component/PrimeGenerator/PrimeGenerator';\nimport cpu from './assets/cpu.svg';\n\nfunction App() {\n    return (\n        <div className='container'>\n            <h1 className='app-name'>Prime Processor</h1>\n            <img src={cpu} alt='cpu' className='app-img' />\n            <PrimeGenerator />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}